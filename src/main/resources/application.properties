server.port=8080


spring.application.name=sharding-jdbc-demo


#spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/sharding-test?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
#spring.datasource.username=root
#spring.datasource.password=123456

# \u663E\u793Asql
spring.shardingsphere.props.sql-show=true
# \u6570\u636E\u6E90\u914D\u7F6E\uFF0C\u591A\u4E2A\u9017\u53F7\u5206\u9694\u3002\u8FD9\u91CC\u503C\u5B9A\u4E49\u4E86\u4E00\u4E2A default \u6570\u636E\u6E90
spring.shardingsphere.datasource.names=default
# default \u6570\u636E\u6E90\u914D\u7F6E
spring.shardingsphere.datasource.default.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.default.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.default.jdbc-url=jdbc:mysql://localhost:3306/sharding-test?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.default.username=root
spring.shardingsphere.datasource.default.password=123456

# key generator
spring.shardingsphere.rules.sharding.key-generators.uuid.type=UUID
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=1014

# \u5206\u8868\u4FE1\u606F\uFF0C\u8FD9\u91CC\u914D\u7F6E\u4E86 order_info \u7684\u5206\u8868\u4FE1\u606F
# \u771F\u5B9E\u8868
spring.shardingsphere.rules.sharding.tables.order_info.actual-data-nodes=default.order_info_${['hfw','why']}
# \u5206\u8868\u5B57\u6BB5
spring.shardingsphere.rules.sharding.tables.order_info.table-strategy.standard.sharding-column=project_name
# \u5206\u8868\u7B97\u6CD5\u540D\u79F0 (\u903B\u8F91\u8868\u7684\u540D\u79F0)
spring.shardingsphere.rules.sharding.tables.order_info.table-strategy.standard.sharding-algorithm-name=order_info
# \u81EA\u52A8\u751F\u6210key \u7684\u5217
spring.shardingsphere.rules.sharding.tables.order_info.key-generate-strategy.column=order_id
# \u81EA\u52A8\u751F\u6210key\u7684\u7B97\u6CD5
spring.shardingsphere.rules.sharding.tables.order_info.key-generate-strategy.key-generator-name=snowflake
# \u5206\u7247\u7B97\u6CD5
spring.shardingsphere.rules.sharding.sharding-algorithms.order_info.type=inline
# \u5206\u7247\u8868\u8FBE\u5F0F
spring.shardingsphere.rules.sharding.sharding-algorithms.order_info.props.algorithm-expression=order_info_${project_name}

# user \u5206\u8868\u4FE1\u606F
# \u771F\u5B9E\u8868
spring.shardingsphere.rules.sharding.tables.user.actual-data-nodes=default.user_${0..1}
# \u5206\u8868\u5B57\u6BB5
spring.shardingsphere.rules.sharding.tables.user.table-strategy.standard.sharding-column=user_id
# \u5206\u8868\u7B97\u6CD5\u540D\u79F0 (\u903B\u8F91\u8868\u7684\u540D\u79F0)
spring.shardingsphere.rules.sharding.tables.user.table-strategy.standard.sharding-algorithm-name=user
# \u5206\u7247\u7B97\u6CD5
spring.shardingsphere.rules.sharding.sharding-algorithms.user.type=inline
# \u5206\u7247\u8868\u8FBE\u5F0F
spring.shardingsphere.rules.sharding.sharding-algorithms.user.props.algorithm-expression=user_${user_id % 2}


#\u591A\u6570\u636E\u6E90pagehelper\u914D\u7F6E
#\u5206\u9875\u63D2\u4EF6\u4F1A\u81EA\u52A8\u68C0\u6D4B\u5F53\u524D\u7684\u6570\u636E\u5E93\u94FE\u63A5\uFF0C\u81EA\u52A8\u9009\u62E9\u5408\u9002\u7684\u5206\u9875\u65B9\u5F0F
pagehelper.auto-dialect=true
#\u9ED8\u8BA4\u503C\u4E3A false\u3002\u8BBE\u7F6E\u4E3A true \u65F6\uFF0C\u5141\u8BB8\u5728\u8FD0\u884C\u65F6\u6839\u636E\u591A\u6570\u636E\u6E90\u81EA\u52A8\u8BC6\u522B\u5BF9\u5E94\u65B9\u8A00\u7684\u5206\u9875
pagehelper.auto-runtime-dialect=true

mybatis.mapper-locations=classpath:cn.com.pzg.sharding.jdbc.demo.mapper/*.xml
mybatis.configuration.map-underscore-to-camel-case=true